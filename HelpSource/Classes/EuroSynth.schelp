TITLE:: EuroSynth
summary:: Translation between SuperCollider synth and EuroRack modules
categories:: EuroCollider
related:: Classes/EuroClockIn, Classes/EuroClockOut, classes/Pbind, Guides/EuroCollider

DESCRIPTION::
EuroSynth implements a tuning system so the Pattern system of SuperCollider can be used on a eurorack modular system.

NOTE::
Please check if your audio interface is DC coupled, see link::Guides/EuroCollider#What is a DC coupled interface:: for more information.
::


Before starting make sure you have wired everything up properly.
In this example we will use

LIST::
## The audio signal of the synth is connected to input 6 (including 0!) of the audio interface
## output 4 (including 0!) of the audio interface is connected to the cvIn of the module
## output 5 (including 0!) is connected to a gate input - this is optional
::

Also make sure that you have started the server with the appropiated device and number of out- and inputs, see link::Classes/ServerOptions:: and link::Guides/EuroCollider#Configure SuperCollider::

code::
// define new EuroSynth and tune it directly
e = EuroSynth(soundIn: 6, cvOut: 4, gateOut: 5, playMonitor: true).tune;

// after the tuning process finished we can use the synth in a pattern
(
Pdef(\myEuroPattern, Pbind(
	\type, \euro,
	\euro, e,
	\dur, 0.25,
	// as we will send gates instead of triggers
	// we can also use sustain to define the gate length
	\sustain, Pseq([0.2, 0.1], inf),
	\degree, Pxrand((0..12), inf),
)).play;
)

Pdef(\myEuroPattern).stop;
::

The build in monitor of EuroSynth is only mono and therefore you only may have heard something on your left speaker - this is intentional as SuperCollider is often used with an arbitrary number of output channels, therefore it should be your responsibility to map the input to your desired output.
One strategy is to use Ndefs for this where we use e.g. link::Classes/Pan2::, so e.g.

code::
// stop the monitor of EuroSynth
e.monitor.stop;

(
Ndef(\myEuroModule, {
	Pan2.ar(SoundIn.ar(e.soundIn), \pos.kr(0.0));
}).play.gui;
)

Pdef(\myEuroPattern).play;

// e.g. modulate the panning
Ndef(\myEuroModule).map(\pos, Ndef(\posMod, {SinOsc.kr(1.0)}));
// fade out in 2 seconds
Ndef(\myEuroModule).clear(2.0);
::

CLASSMETHODS::

PRIVATE:: addEventType


PRIVATE:: initClass

METHOD:: new
argument:: soundIn
link::Classes/SoundIn:: bus number where the audio signal of the module is arriving. Can be code::nil:: in case you only want to use the gate functionality in case you do not have a DC coupled interface.
argument:: cvOut
link::Classes/Out:: bus number where the cv signal should be put out. Can be code::nil:: in case you only want to output gates in case you do not have a DC coupled interface.
Needs to be connected to the CV in of the module.
argument:: gateOut
Optional link::Classes/Out:: bus number where a gate signal will be put out.
If this is not provided or nil it will spawn a new private audio link::Classes/Bus:: on the server where the output will be headed to in order to not put out on output 0 of the audio interface.
If you use the associated link::Classes/EuroSynth#-controlSynth:: manually you need to manually close the gate, e.g. via link::Classes/Function#-defer::
argument:: playMonitor
If true it will spawn a link::Classes/Ndef:: where the input of the module wil be played back on link::Classes/Bus:: 0 of the audio interface.
This is more of a convenience method and one should write its own link::Classes/Ndef:: or link::Classes/SynthDef:: to control the output of the eurorack module.
See link::Classes/EuroSynth#-monitor:: for more information.
argument:: negativeVoltage
If true it will also allow to output negative voltages.
Some modules are fine with this (e.g. MakeNoise STO) but others are not (e.g. Mutable Instruments Plaits), therefore it is turned off by default.


INSTANCEMETHODS::

METHOD:: tune
Will run the (re-)tuning procedure for the synth.
argument:: baseFreq
Reference frequency which should be considered a starting point for the tuning process.
Should be a low note because we will go up the scale.
argument:: steps
Number of steps which will be used for tuning.
argument:: endRange
End of tuning range. 0.5 will cover around 4 octaves.
argument:: negativeSteps
Allows to also tune a number of negative steps as well.
This is only allowed if the EuroSynth instance was initiated with negativeVoltage set to true.
argument:: minMatch
midi steps which tollerate a deviation from the baseFreq during absolute tuning.

METHOD:: freq
Will output the according DC offset on the interface so the oscillator plays the set frequency.
argument:: newFreq

PRIVATE:: init

PRIVATE:: prTuningRoutine

METHOD:: tuningMap
A link::Classes/Dictionary:: in which the internal relation between CV and frequency is stored.

METHOD:: controlSynth
A synth which is used to control the output of the DC offset (aka CV) and the trigger of the EuroSynth.
This will also respawn if link::Classes/CmdPeriod:: was pressed.

METHOD:: resetTuning
Will reset the tuning.

METHOD:: isTuned
A boolean if the synth was already tuned or not.


METHOD:: freqCv
Allows to convert a frequency to a CV value.
This is used internally when called a pattern is used but can be useful for manula setting of frequencies.
argument:: freq

METHOD:: startControlSynth
Internal method which will start a synth which is responsible of emitting the proper DC offset to the synth and providing a gate.
Normally the synth is created automatically and also revived when stopped via link::Classes/CmdPeriod:: but in case you want to respawn it manually you can do it via this method.

METHOD:: monitor
Returns a link::Classes/Ndef:: which maps the soundIn argument to the link::Classes/Out:: 0 of the interface.
Use it like
CODE::
e = EuroSynth(...);
e.monitor.play;
e.monitor.stop;
::

METHOD:: clear
Will clear and free everything associated from the server and reset the tuning.
Use this before creating a new link::Classes/EuroSynth:: with the same output config but different settings, e.g. negativeVoltage.

PRIVATE:: curFreq

METHOD:: gateOut

METHOD:: negativeVoltage

METHOD:: soundIn

METHOD:: cvOut

PRIVATE:: addTuner


EXAMPLES::

SUBSECTION:: Sync two patterns via Tdef

code::
// assuming you have two tuned euro synths
(
e = EuroSynth(soundIn: 6, cvOut: 4, gateOut: 5).tune;
f = EuroSynth(soundIn: 7, cvOut: 6, gateOut: 7).tune;
)

// every 100 steps it will dice a new sequence
(
Tdef(\glass, {
	inf.do({
		var waitTime = 0.125;
		var pattern = (0..12).scramble;
		var noMatch = true;
		while({noMatch}, {
			100.do({|i|
				(
					\type: \euro,
					\euro: e,
					\dur: waitTime,
					\scale: Scale.minor,
					\octave: 4,
					\degree: pattern[0..4].wrapAt(i),
				).play;
				(
					\type: \euro,
					\euro: f,
					\dur: waitTime,
					\scale: Scale.minor,
					\octave: 4,
					\degree: pattern[0..5].wrapAt(i),
				).play;
				waitTime.wait;
			});
			noMatch = false;
		});
	});
}).play;
)
::
